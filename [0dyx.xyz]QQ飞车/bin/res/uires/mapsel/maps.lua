mapscat=
{
	{
		id="随机";
		tabcover="res/uires/mapsel/随机.gsa";
		cat=0;
	};
	{
		id="全部";
		tabcover="res/uires/mapsel/全部.gsa";
		cat=1;
	};
	{
		id="森林";
		tabcover="res/uires/mapsel/森林.gsa";
		cat=2;
	};
	{
		id="城镇";
		tabcover="res/uires/mapsel/城镇.gsa";
		cat=3;
	};
	--[[{
		id="太空";
		tabcover="res/uires/mapsel/太空.gsa";
		cat=4;
	};]]
};

maps=
{
	{
		id="全部随机";
		tabcover="res/uires/mapsel/随机/所有随机.gsa";
		thumb="res/uires/mapsel/随机/thumbs/所有随机.gsa";
		thumb2="res/uires/mapsel/随机/thumbs/所有随机2.gsa";
		icon="res/uires/mapsel/随机/icons/所有随机.gsa";
		cat=0;
		mapid=0;
		lv=0;
	};
	{
		id="速度随机";
		tabcover="res/uires/mapsel/随机/速度随机.gsa";
		thumb="res/uires/mapsel/随机/thumbs/速度随机.gsa";
		thumb2="res/uires/mapsel/随机/thumbs/速度随机2.gsa";
		icon="res/uires/mapsel/随机/icons/速度随机.gsa";
		cat=0;
		mapid=1;
		lv=0;
	};
	{
		id="人气随机";
		tabcover="res/uires/mapsel/随机/人气随机.gsa";
		thumb="res/uires/mapsel/随机/thumbs/人气随机.gsa";
		thumb2="res/uires/mapsel/随机/thumbs/人气随机2.gsa";
		icon="res/uires/mapsel/随机/icons/人气随机.gsa";
		cat=0;
		mapid=2;
		lv=0;
	};
	--[[{
		id="反向随机";
		tabcover="res/uires/mapsel/随机/反向随机.gsa";
		thumb="res/uires/mapsel/随机/thumbs/反向随机.gsa";
		thumb2="res/uires/mapsel/随机/thumbs/反向随机2.gsa";
		icon="res/uires/mapsel/随机/icons/反向随机.gsa";
		cat=0;
		mapid=3;
		lv=0;
	};
	{
		id="镜像随机";
		tabcover="res/uires/mapsel/随机/镜像随机.gsa";
		thumb="res/uires/mapsel/随机/thumbs/镜像随机.gsa";
		thumb2="res/uires/mapsel/随机/thumbs/镜像随机2.gsa";
		icon="res/uires/mapsel/随机/icons/镜像随机.gsa";
		cat=0;
		mapid=4;
		lv=0;
	};]]
	--[[{
		id="城镇";
		tabcover="res/uires/mapsel/城镇/城镇.gsa";
		thumb="res/uires/mapsel/城镇/thumbs/城镇.gsa";
		thumb2="res/uires/mapsel/城镇/thumbs/城镇2.gsa";
		icon="res/uires/mapsel/城镇/icons/城镇.gsa";
		cat=3;
		mapid=101;
		lv=1;
	};
	{
		id="太空站";
		tabcover="res/uires/mapsel/太空/太空站.gsa";
		thumb="res/uires/mapsel/太空/thumbs/太空站.gsa";
		thumb2="res/uires/mapsel/太空/thumbs/太空站2.gsa";
		icon="res/uires/mapsel/太空/icons/太空站.gsa";
		cat=4;
		mapid=102;
		lv=1;
	};]]
	--[[{
		id="幽暗城堡";	--测试用图
		tabcover="res/uires/mapsel/森林/幽暗城堡.gsa";
		thumb="res/uires/mapsel/森林/thumbs/幽暗城堡.gsa";
		thumb2="res/uires/mapsel/森林/thumbs/幽暗城堡2.gsa";
		icon="res/uires/mapsel/森林/icons/幽暗城堡.gsa";
		cat=2;
		mapid=103;
		lv=1;
	};]]
	{
		id="中国城";
		tabcover="res/uires/mapsel/森林/中国城.gsa";
		thumb="res/uires/mapsel/森林/thumbs/中国城.gsa";
		thumb2="res/uires/mapsel/森林/thumbs/中国城2.gsa";
		icon="res/uires/mapsel/森林/icons/中国城.gsa";
		cat=3;
		mapid=104;
		lv=1;
	};
	{
		id="沉睡森林";
		tabcover="res/uires/mapsel/森林/沉睡森林.gsa";
		thumb="res/uires/mapsel/森林/thumbs/沉睡森林.gsa";
		thumb2="res/uires/mapsel/森林/thumbs/沉睡森林2.gsa";
		icon="res/uires/mapsel/森林/icons/沉睡森林.gsa";
		cat=2;
		mapid=105;
		lv=3;
	};
	--[[
	{
		id="冰封溪谷";
		tabcover="res/uires/mapsel/森林/冰封溪谷.gsa";
		thumb="res/uires/mapsel/森林/thumbs/冰封溪谷.gsa";
		thumb2="res/uires/mapsel/森林/thumbs/冰封溪谷2.gsa";
		icon="res/uires/mapsel/森林/icons/冰封溪谷.gsa";
		cat=2;
		mapid=106;
		lv=1;
	};]]
	--[[{
		id="城市手指";
		tabcover="res/uires/mapsel/城镇/城市手指.gsa";
		thumb="res/uires/mapsel/城镇/thumbs/城市手指.gsa";
		thumb2="res/uires/mapsel/城镇/thumbs/城市手指2.gsa";
		icon="res/uires/mapsel/城镇/icons/城市手指.gsa";
		cat=3;
		mapid=107;
		lv=3;
	};]]
	{
		id="鸟巢";
		tabcover="res/uires/mapsel/城镇/鸟巢.gsa";
		thumb="res/uires/mapsel/城镇/thumbs/鸟巢.gsa";
		thumb2="res/uires/mapsel/城镇/thumbs/鸟巢2.gsa";
		icon="res/uires/mapsel/城镇/icons/鸟巢.gsa";
		cat=3;
		mapid=108;
		lv=4;
	};	
};


DummyMap=
{
	id="找不到地图";
	tabcover="";
	thumb="";
	icon="";
	cat=0;
	mapid=0;
	lv=0;
};

function QueryMapCount(cat)
	local count=0;
	if cat == 1 then	--1表示全部地图
		for i=1,table.getn(maps),1 do
			local t = maps[i];
			if t.cat >= cat then
				count = count+1;
			end;
		end;
	end;
	if cat ~= 1 then
		for i=1,table.getn(maps),1 do
			local t = maps[i];
			if t.cat==cat then
				count = count+1;
			end;
		end;
	end;
	return count;
end;	

function FetchMaps(cat)
	local count=0;
	local newmaps={};
	if cat == 1 then
		for i=1,table.getn(maps),1 do
			local t = maps[i];
			if t.cat >= cat then
				count = count+1;
				table.insert(newmaps,t);
			end;
		end;
	end;
	if cat ~= 1 then
		for i=1,table.getn(maps),1 do
			local t = maps[i];
			if t.cat==cat then
				count = count+1;
				table.insert(newmaps,t);
			end;
		end;	
	end;
	return newmaps, count;
end;

function FindMap(mapid)
	if mapid==nil then
		return DummyMap;
	end;
	for i=1,table.getn(maps),1 do
		local t = maps[i];
		if t.mapid==mapid then
			return t;
		end;
	end;	
	return DummyMap;
end;

function FindMapByCatIndex(cat, index)
	local count=0;
	local newmaps={};
	if cat == 1 then
		for i=1,table.getn(maps),1 do
			local t = maps[i];
			if t.cat >= cat then
				if index == count then
					return t;
				end;
				count = count+1;
			end;
		end;
	end;
	if cat ~= 1 then
		for i=1,table.getn(maps),1 do
			local t = maps[i];
			if t.cat==cat then
				if index == count then
					return t;
				end;
				count = count+1;
			end;
		end;	
	end;
	return DummyMap;
end;