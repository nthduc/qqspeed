/*----------------------------------------------------------------------
Debugging Applications for Microsoft .NET and Microsoft Windows
Copyright © 1997-2003 John Robbins -- All rights reserved.
----------------------------------------------------------------------*/
#include "stdafx.h"
#include "TestRec.h"

#include "TestRecDoc.h"

#include "ScriptOptions.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

////////////////////////////////////////////////////////////////////////
// The temporary hardcoded strings.  In the next version of TestRec, I
// will allow you to choose the output language.
const LPCTSTR k_VBS_SCRIPTHEADER =
_T ( "' TestRec autogenerated script\r\n" ) \
_T ( "' The TInput object.\r\n" ) \
_T ( "dim tInput\r\n" ) \
_T ( "' The TSystem object.\r\n" ) \
_T ( "dim tSystem\r\n\r\n" ) \
_T ( "' A general TWindow object.\r\n" ) \
_T ( "dim tWin\r\n" ) \
_T ( "' A general child TWindow object.\r\n" ) \
_T ( "dim tChildWin\r\n\r\n" ) \
_T ( "' Create the system object.\r\n" ) \
_T ( "set tSystem = WScript.CreateObject ( \"Tester.TSystem\" )\r\n" )\
_T ( "' Create the input object.\r\n" ) \
_T( "set tInput = WScript.CreateObject ( \"Tester.TInput\" )\r\n\r\n" );

const LPCTSTR k_JS_SCRIPTHEADER =
_T ( "// TestRec autogenerated script\r\n" ) \
_T ( "// The TInput object.\r\n" ) \
_T ( "var tInput = WScript.CreateObject ( \"Tester.TInput\" ) ;\r\n" ) \
_T ( "// The TSystem object.\r\n" ) \
_T ( "var tSystem = WScript.CreateObject ( \"Tester.TSystem\" ) ;\r\n\r\n\r\n" ) \
_T ( "// A general TWindow object.\r\n" ) \
_T ( "var tWin ;\r\n" ) \
_T ( "// A general child TWindow object.\r\n" ) \
_T ( "var tChildWin ;\r\n\r\n" ) ;

const LPCTSTR k_VBS_ATTEMPTCHILDSETFOCUS =
_T ( "If ( Not ( tChildWin is Nothing ) ) then\r\n" ) \
_T ( "    tChildWin.SetFocusTWindow\r\n" ) \
_T ( "else\r\n" ) \
_T ( "    tWin.SetFocusTWindow\r\n" ) \
_T ( "End If" ) ;

const LPCTSTR k_JS_ATTEMPTCHILDSETFOCUS =
_T ( "if (  tChildWin != null )\r\n" ) \
_T ( "{\r\n" ) \
_T ( "    tChildWin.SetFocusTWindow ( ) ;\r\n" ) \
_T ( "}\r\n" ) \
_T ( "else\r\n" ) \
_T ( "{\r\n" ) \
_T ( "    tWin.SetFocusTWindow ( ) ;\r\n" ) \
_T ( "}" ) ;

////////////////////////////////////////////////////////////////////////
// CBaseTestRecOut - The base class for both CVBSTestRecOutput and
// CJSTestRecOutput.
class CBaseTestRecOut : public CRecordingUIOutput
{
public      :
    CBaseTestRecOut ( CTestRecDoc * pDoc )
    {
        m_pDoc = pDoc ;
        m_dwLastEvent = 0 ;
    }

    virtual void StartingRecording ( void )
    {
        m_dwLastEvent = 0 ;
    }

    virtual void StoppingRecording ( void )
    {
    }

    virtual BOOL RecorderHasFocus ( void )
    {
        if ( ::GetForegroundWindow ( ) ==
             AfxGetApp()->m_pMainWnd->m_hWnd )
        {
            return ( TRUE ) ;
        }
        return ( FALSE ) ;
    }

    void CheckIfSleepNeeded ( void )
    {
        if ( TRUE == m_pDoc->IsRecording ( ) )
        {
            if ( 0 == m_dwLastEvent )
            {
                m_dwLastEvent = GetTickCount ( ) ;
            }
            else
            {
                DWORD dwLastTick = GetTickCount ( ) ;
                DWORD dwElapsed =  dwLastTick - m_dwLastEvent ;
                if ( dwElapsed > m_pDoc->GetMinSleepTime ( ) )
                {
                    Sleep ( dwElapsed ) ;
                }
                m_dwLastEvent = dwLastTick ;
            }
        }
    }

    virtual void RecordingAborted ( void )
    {
        // Pass it on to the view.
        m_pDoc->StopRecording ( ) ;
    }

protected     :
    CTestRecDoc * m_pDoc ;

    DWORD m_dwLastEvent ;

} ;



////////////////////////////////////////////////////////////////////////
// CVBSTestRecOut - The CRecordingUIOutput class that communicates with
// the CTestRecDoc class and record VBScript.
class CVBSTestRecOut : public CBaseTestRecOut
{
public      :
    CVBSTestRecOut ( CTestRecDoc * pDoc )
                : CBaseTestRecOut ( pDoc )
    {
    }

    virtual void NewDocumentCreated ( void )
    {
        m_pDoc->AppendText ( k_VBS_SCRIPTHEADER ) ;
    }

    virtual void Input ( LPCTSTR szStr )
    {
        CheckIfSleepNeeded ( ) ;

        CString cTemp ;
        LPCTSTR szCurr = szStr ;
        while ( _T ( '\0' ) != *szCurr )
        {
            if ( _T ( '"' ) == *szCurr )
            {
                cTemp += _T ( "\"" ) ;
            }
            cTemp += *szCurr ;
            szCurr++ ;
        }

        CString cText ;
        cText.Format ( _T ( "tInput.PlayInput \"%s\" " ) , cTemp );

        m_pDoc->AppendText ( cText ) ;
    }

    virtual void UseMultipleMonitors ( BOOL bUseMM )
    {
        LPCTSTR szText ;
        CString cText ;
        if ( TRUE == bUseMM )
        {
            szText = _T ( "tInput.MultiMonitor = True\r\n" ) ;
            cText.Format (
                _T("tSystem.CheckVirtualResolution %d , %d , %d , %d\r\n") ,
                GetSystemMetrics ( SM_CXVIRTUALSCREEN ) ,
                GetSystemMetrics ( SM_CYVIRTUALSCREEN ) ,
                GetSystemMetrics ( SM_XVIRTUALSCREEN )  ,
                GetSystemMetrics ( SM_YVIRTUALSCREEN )   ) ;
        }
        else
        {
            szText = _T ( "tInput.MultiMonitor = False\r\n" ) ;
            cText.Format (
                _T("tSystem.CheckResolution ( %d , %d )\r\n") ,
                GetSystemMetrics ( SM_CXSCREEN )        ,
                GetSystemMetrics ( SM_CYSCREEN )         ) ;
        }
        m_pDoc->AppendText ( szText ) ;
        m_pDoc->AppendText ( cText ) ;
    }

    virtual void FindTopWindow ( LPCTSTR szClass , LPCTSTR szTitle )
    {
        CString cText ;
        cText = _T ( "\r\nSet tWin = tSystem.FindTopWindow ( \"" ) ;

        cText += szClass ;
        cText += _T ( "\" , \"" ) ;

        if ( _T ( '\0' ) != szTitle[0] )
        {
            cText += szTitle ;
        }
        cText += _T ( "\" )" ) ;

        m_pDoc->AppendText ( cText ) ;

        m_pDoc->AppendText ( _T( "tWin.SetForegroundTWindow" ) ) ;

    }

    virtual void SetWindowSize ( int iLeft   ,
                                 int iTop    ,
                                 int iWidth  ,
                                 int iHeight  )
    {
        CString cText ;

        cText.Format ( _T ( "tWin.SetWindowSize %d , %d , %d , %d" ) ,
                       iLeft                                         ,
                       iTop                                          ,
                       iWidth                                        ,
                       iHeight                                        );
        m_pDoc->AppendText ( cText ) ;
    }

    virtual void FindChildWindowWithID ( LPCTSTR szClass ,
                                         int     iID     ,
                                         LPCTSTR szTitle  )
    {
        CString cText ;

        cText = _T ( "Set tChildWin = tWin.FindChildWindowWithID ( \"");

        if ( _T ( '\0' ) != szClass[ 0 ] )
        {
            cText += szClass ;
        }
        cText += _T ( "\" , " ) ;

        CString cTemp ;
        cTemp.Format ( _T ( "%d" ) , iID ) ;

        cText += cTemp ;

        cText += _T ( " , \"" ) ;

        if ( _T ( '\0' ) != szTitle[ 0 ] )
        {
            cText += szTitle ;
        }
        cText += _T ( "\")" ) ;

        m_pDoc->AppendText ( cText ) ;

        m_pDoc->AppendText ( k_VBS_ATTEMPTCHILDSETFOCUS ) ;

    }

    virtual void SetFocus ( LPCTSTR szForeTitle   ,
                            LPCTSTR szParentTitle ,
                            LPCTSTR szChildTitle  ,
                            UINT    idFocus        )
    {

        if ( _T ( '\0' ) == szForeTitle[ 0 ] )
        {
            m_pDoc->AppendText ( _T ( "' Invalid foreground window!\r\n" ) ) ;
            return ;
        }

        CString cText ;

        cText = _T ( "tSystem.SetSpecificFocus \"" ) ;
        cText += szForeTitle ;

        cText += _T ( "\" , \"" ) ;

        if ( _T ( '\0' ) != szParentTitle[ 0 ] )
        {
            cText += szParentTitle ;
        }

        cText += _T ( "\" , \"" ) ;

        if ( _T ( '\0' ) != szChildTitle )
        {
            cText += szChildTitle ;
        }

        cText += _T ( "\" , " ) ;

        CString cTemp ;
        cTemp.Format ( _T ( "%d" ) , idFocus ) ;

        cText += cTemp ;

        cText += _T ( " \r\n" ) ;

        m_pDoc->AppendText ( cText ) ;
    }

    void Sleep ( DWORD dwMilliseconds )
    {
        double dSeconds = (double)dwMilliseconds / (double)1000 ;

        CString cText ;

        cText.Format ( _T ( "tSystem.Sleep %.2f" ) , dSeconds ) ;
        m_pDoc->AppendText ( cText ) ;
    }

} ;

////////////////////////////////////////////////////////////////////////
// CJSTestRecOut - The CRecordingUIOutput class that communicates with
// the CTestRecDoc class and does Java Script.
class CJSTestRecOut : public CBaseTestRecOut
{
public      :
    CJSTestRecOut ( CTestRecDoc * pDoc )
                : CBaseTestRecOut ( pDoc )
    {
    }

    virtual void NewDocumentCreated ( void )
    {
        m_pDoc->AppendText ( k_JS_SCRIPTHEADER ) ;
    }

    virtual void Input ( LPCTSTR szStr )
    {
        CheckIfSleepNeeded ( ) ;
        
        CString cTemp ;
        LPCTSTR szCurr = szStr ;
        while ( _T ( '\0' ) != *szCurr )
        {
            if ( _T ( '"' ) == *szCurr )
            {
                cTemp += _T ( "\\" ) ;
            }
            else if ( _T ( '\\' ) == *szCurr )
            {
                cTemp += _T ( "\\" ) ;
            }
            cTemp += *szCurr ;
            szCurr++ ;
        }

        CString cText ;
        cText.Format ( _T ( "tInput.PlayInput ( \"%s\" ) ;" ) , cTemp );

        m_pDoc->AppendText ( cText ) ;
    }

    virtual void UseMultipleMonitors ( BOOL bUseMM )
    {
        LPCTSTR szText ;
        CString cText ;
        if ( TRUE == bUseMM )
        {
            szText = _T ( "tInput.MultiMonitor = true ;\r\n" ) ;
            cText.Format (
                _T("tSystem.CheckVirtualResolution ( %d , %d , %d , %d ) ;\r\n") ,
                GetSystemMetrics ( SM_CXVIRTUALSCREEN ) ,
                GetSystemMetrics ( SM_CYVIRTUALSCREEN ) ,
                GetSystemMetrics ( SM_XVIRTUALSCREEN )  ,
                GetSystemMetrics ( SM_YVIRTUALSCREEN )   ) ;
        }
        else
        {
            szText = _T ( "tInput.MultiMonitor = false ;\r\n" ) ;
            cText.Format (
                _T("tSystem.CheckResolution ( %d , %d )\r\n") ,
                GetSystemMetrics ( SM_CXSCREEN )        ,
                GetSystemMetrics ( SM_CYSCREEN )         ) ;

        }
        m_pDoc->AppendText ( szText ) ;
        m_pDoc->AppendText ( cText ) ;
    }


    virtual void FindTopWindow ( LPCTSTR szClass , LPCTSTR szTitle )
    {
        CString cText ;
        cText = _T ( "\r\ntWin = tSystem.FindTopWindow ( \"" ) ;

        cText += szClass ;
        cText += _T ( "\" , \"" ) ;

        if ( _T ( '\0' ) != szTitle[0] )
        {
            cText += szTitle ;
        }
        cText += _T ( "\" ) ;" ) ;

        m_pDoc->AppendText ( cText ) ;

        m_pDoc->AppendText ( _T( "tWin.SetForegroundTWindow ( ) ;" ) ) ;

    }

    virtual void SetWindowSize ( int iLeft   ,
                                 int iTop    ,
                                 int iWidth  ,
                                 int iHeight  )
    {
        CString cText ;

        cText.Format ( _T("tWin.SetWindowSize ( %d , %d , %d , %d ) ;"),
                       iLeft                                           ,
                       iTop                                            ,
                       iWidth                                          ,
                       iHeight                                        );
        m_pDoc->AppendText ( cText ) ;
    }

    virtual void FindChildWindowWithID ( LPCTSTR szClass ,
                                         int     iID     ,
                                         LPCTSTR szTitle  )
    {
        CString cText ;

        cText = _T ( "tChildWin = tWin.FindChildWindowWithID ( \"");

        if ( _T ( '\0' ) != szClass[ 0 ] )
        {
            cText += szClass ;
        }
        cText += _T ( "\" , " ) ;

        CString cTemp ;
        cTemp.Format ( _T ( "%d" ) , iID ) ;

        cText += cTemp ;

        cText += _T ( " , \"" ) ;

        if ( _T ( '\0' ) != szTitle[ 0 ] )
        {
            cText += szTitle ;
        }
        cText += _T ( "\" ) ;" ) ;

        m_pDoc->AppendText ( cText ) ;

        m_pDoc->AppendText ( k_JS_ATTEMPTCHILDSETFOCUS ) ;

    }

    virtual void SetFocus ( LPCTSTR szForeTitle   ,
                            LPCTSTR szParentTitle ,
                            LPCTSTR szChildTitle  ,
                            UINT    idFocus        )
    {

        if ( _T ( '\0' ) == szForeTitle[ 0 ] )
        {
            m_pDoc->AppendText ( _T ( "' Invalid foreground window!\r\n" ) ) ;
            return ;
        }

        CString cText ;

        cText = _T ( "tSystem.SetSpecificFocus ( \"" ) ;
        cText += szForeTitle ;

        cText += _T ( "\" , \"" ) ;

        if ( _T ( '\0' ) != szParentTitle[ 0 ] )
        {
            cText += szParentTitle ;
        }

        cText += _T ( "\" , \"" ) ;

        if ( _T ( '\0' ) != szChildTitle )
        {
            cText += szChildTitle ;
        }

        cText += _T ( "\" , " ) ;

        CString cTemp ;
        cTemp.Format ( _T ( "%d" ) , idFocus ) ;

        cText += cTemp ;

        cText += _T ( " ) ;\r\n" ) ;

        m_pDoc->AppendText ( cText ) ;
    }

    void Sleep ( DWORD dwMilliseconds )
    {
        double dSeconds = (double)dwMilliseconds / (double)1000 ;

        CString cText ;

        cText.Format ( _T ( "tSystem.Sleep ( %.2f ) ;" ) , dSeconds ) ;
        m_pDoc->AppendText ( cText ) ;
    }

} ;


////////////////////////////////////////////////////////////////////////
// CTestRecDoc

const LPCTSTR k_VERSIONSTRING = _T ( "Version 3.1" ) ;
const LPCTSTR k_MINPIXELDRAG = _T ( "MinPixelDrag" ) ;
const LPCTSTR k_RECALLMOUSEMOVES = _T ( "RecordAllMouseMoves" ) ;
const LPCTSTR k_RECFOCUSWITHMOUSE = _T ( "RecordFocusChangesWithMouse");
const LPCTSTR k_MINSLEEP =_T ( "MinimumTimeBeforeSleepStatements" ) ;
const LPCTSTR k_DEFAULTLANGUAGE = _T ( "DefaultLanguage" ) ;
const LPCTSTR k_DOCHILDFOCUSSTATEMENTS = _T ( "ChildFocusStatements" ) ;
const LPCTSTR k_MULTIMON = _T ( "MultipleMonitor" ) ;

const LPCTSTR k_JAVASCRIPT = _T ( "JavaScript" ) ;
const LPCTSTR k_VBSCRIPT = _T ( "VBScript" ) ;

IMPLEMENT_DYNCREATE(CTestRecDoc, CDocument)

BEGIN_MESSAGE_MAP(CTestRecDoc, CDocument)
    //{{AFX_MSG_MAP(CTestRecDoc)
        ON_COMMAND(ID_SCRIPT_RECORD, OnScriptRecord)
    ON_COMMAND(ID_SCRIPT_OPTIONS, OnScriptOptions)
    //}}AFX_MSG_MAP
END_MESSAGE_MAP()

////////////////////////////////////////////////////////////////////////
// CTestRecDoc construction/destruction

CTestRecDoc :: CTestRecDoc ( )
{
    m_bIsRecording = FALSE ;

    m_pOutput = NULL ;
    m_pRecEngine = NULL ;

    m_dwMinSleepMilliseconds = 2000 ;

    if ( 0 == m_cRecordingTitle.LoadString ( ID_RECORDING_TITLE ) )
    {
        ASSERT ( !"LoadString ( ID_RECORDING_TITLE ) FAILED!" ) ;
        m_cRecordingTitle = _T ( "RECORDING!" ) ;
    }

}

CTestRecDoc :: ~CTestRecDoc ( )
{
    if ( NULL != m_pOutput )
    {
        delete m_pOutput ;
    }
    if ( NULL != m_pRecEngine )
    {
        delete m_pRecEngine ;
    }
}

BOOL CTestRecDoc :: IsDefaultLanguageJavaScript ( void )
{
    CTestRecApp * pApp = (CTestRecApp *)AfxGetApp ( ) ;
    CString cStr = pApp->GetProfileString ( k_VERSIONSTRING   ,
                                            k_DEFAULTLANGUAGE ,
                                            k_JAVASCRIPT       ) ;
    if ( cStr == k_JAVASCRIPT )
    {
        return ( TRUE ) ;
    }
    else
    {
        return ( FALSE ) ;
    }
}

void CTestRecDoc :: LoadUpSettings ( void )
{
    CTestRecApp * pApp = (CTestRecApp *)AfxGetApp ( ) ;

    int iMinPixelDrag = pApp->GetProfileInt ( k_VERSIONSTRING ,
                                              k_MINPIXELDRAG  ,
                                              50               ) ;
    BOOL bRecordAllMouseMoves = pApp->GetProfileInt( k_VERSIONSTRING   ,
                                                     k_RECALLMOUSEMOVES,
                                                     0                );
    BOOL bRecordFocusChangesWithMouse
                          = pApp->GetProfileInt ( k_VERSIONSTRING     ,
                                                  k_RECFOCUSWITHMOUSE ,
                                                  1                   );
    BOOL bDoChildFocusStatements
                  = pApp->GetProfileInt ( k_VERSIONSTRING           ,
                                          k_DOCHILDFOCUSSTATEMENTS  ,
                                          0                          ) ;
    BOOL bMultiMon = pApp->GetProfileInt ( k_VERSIONSTRING ,
                                           k_MULTIMON      ,
                                           1                ) ;

    m_dwMinSleepMilliseconds = pApp->GetProfileInt ( k_VERSIONSTRING ,
                                                     k_MINSLEEP      ,
                                                     2                );
    m_dwMinSleepMilliseconds *= 1000 ;

    m_pRecEngine->SetMinDragLength ( iMinPixelDrag ) ;
    m_pRecEngine->RecordAllMouseMovements ( bRecordAllMouseMoves ) ;
    m_pRecEngine->
           RecordFocusForMouseActions ( bRecordFocusChangesWithMouse ) ;
    m_pRecEngine->RecordChildFocus ( bDoChildFocusStatements ) ;
    m_pRecEngine->MultipleMonitors ( bMultiMon ) ;
}

BOOL CTestRecDoc :: OnNewDocument ( )
{
    if ( ! CDocument::OnNewDocument ( ) )
    {
        return ( FALSE ) ;
    }

    // Empty out the view.
    POSITION pos = GetFirstViewPosition ( ) ;
    CEditView* pView = (CEditView*)GetNextView ( pos ) ;

    CEdit & cEdit = pView->GetEditCtrl ( ) ;

    cEdit.SetWindowText ( _T ( "" ) ) ;

    // Create the output class.
    if ( NULL != m_pOutput )
    {
        delete ( m_pOutput ) ;
    }
    if ( TRUE == IsDefaultLanguageJavaScript ( ) )
    {
        m_pOutput = new CJSTestRecOut ( this ) ;
    }
    else
    {
        m_pOutput = new CVBSTestRecOut ( this ) ;
    }

    if ( NULL == m_pRecEngine )
    {
        m_pRecEngine = new CRecordingEngine ( m_pOutput ) ;
    }
    else
    {
        // Set the recording engine output class.
        m_pRecEngine->ChangeUIOutputClass ( m_pOutput ) ;
    }

    // Slap in the script information.
    m_pOutput->NewDocumentCreated ( ) ;

    LoadUpSettings ( ) ;

    SetModifiedFlag ( FALSE ) ;

    return ( TRUE ) ;
}

BOOL CTestRecDoc :: OnOpenDocument ( LPCTSTR lpszPathName )
{
    if ( ! CDocument::OnOpenDocument ( lpszPathName ) )
    {
        return ( FALSE) ;
    }

    // Determine the language for this file.
    TCHAR * pExt = _tcsrchr ( lpszPathName , _T ( '.' ) ) ;
    BOOL bUseJavaScript = TRUE ;
    if ( NULL != pExt )
    {
        if ( 0 == _tcsicmp ( pExt , _T ( ".js" ) ) )
        {
            bUseJavaScript = TRUE ;
        }
        else if ( 0 == _tcsicmp ( pExt , _T ( ".vbs" ) ) )
        {
            bUseJavaScript = FALSE ;
        }
        else
        {
            if ( TRUE == IsDefaultLanguageJavaScript ( ) )
            {
                bUseJavaScript = TRUE ;
            }
            else
            {
                bUseJavaScript = FALSE ;
            }
        }
    }
    // Create the output class.
    if ( NULL != m_pOutput )
    {
        delete ( m_pOutput ) ;
    }
    if ( TRUE == bUseJavaScript )
    {
        m_pOutput = new CJSTestRecOut ( this ) ;
    }
    else
    {
        m_pOutput = new CVBSTestRecOut ( this ) ;
    }

    if ( NULL == m_pRecEngine )
    {
        m_pRecEngine = new CRecordingEngine ( m_pOutput ) ;
    }
    else
    {
        // Set the recording engine output class.
        m_pRecEngine->ChangeUIOutputClass ( m_pOutput ) ;
    }

    LoadUpSettings ( ) ;

    SetModifiedFlag ( FALSE ) ;

    return ( TRUE ) ;
}


////////////////////////////////////////////////////////////////////////
// CTestRecDoc serialization

void CTestRecDoc::Serialize(CArchive& ar)
{
    // CEditView contains an edit control which handles all
    // serialization
    ((CEditView*)m_viewList.GetHead())->SerializeRaw(ar);
}

////////////////////////////////////////////////////////////////////////
// CTestRecDoc diagnostics

#ifdef _DEBUG
void CTestRecDoc::AssertValid() const
{
    CDocument::AssertValid();
}

void CTestRecDoc::Dump(CDumpContext& dc) const
{
    CDocument::Dump(dc);
}
#endif //_DEBUG

////////////////////////////////////////////////////////////////////////
// CTestRecDoc commands

void CTestRecDoc :: StopRecording ( void )
{
    // Check if the recording state is set.
    if ( TRUE == m_bIsRecording )
    {
        // Off the state.
        m_bIsRecording = FALSE ;

        // If the window is minimized, restore it.
        if ( TRUE == AfxGetApp()->m_pMainWnd->IsIconic ( ) )
        {
            AfxGetApp()->m_pMainWnd->ShowWindow ( SW_RESTORE ) ;
        }

        // Reset the caption bar.
        AfxGetApp()->m_pMainWnd->SetWindowText ( m_cWindowTitle ) ;

        // Unhook the hook.
        StopRecordingHook ( ) ;

        m_pOutput->StoppingRecording ( ) ;
    }
}

void CTestRecDoc :: AppendText ( LPCTSTR szText )
{
    CEditView * pView = (CEditView*)m_viewList.GetHead ( ) ;
    int iLen = pView->GetEditCtrl().GetWindowTextLength ( ) ;

    pView->GetEditCtrl().SetSel ( iLen , iLen ) ;
    pView->GetEditCtrl().ReplaceSel ( _T ( "\r\n" ) ) ;
    pView->GetEditCtrl().SetSel ( iLen+2 , iLen+2 ) ;
    pView->GetEditCtrl().ReplaceSel ( szText ) ;

    SetModifiedFlag ( ) ;
}

void CTestRecDoc :: OnScriptRecord ( )
{
    ASSERT ( NULL != m_pRecEngine ) ;
    // Start the hook.
    m_pOutput->StartingRecording ( ) ;
    if ( TRUE == StartRecordingHook ( m_pRecEngine ) )
    {
        // Set the state flag.
        m_bIsRecording = TRUE ;

        // Minimize the main application to get it out of the way.
        AfxGetApp()->m_pMainWnd->ShowWindow ( SW_MINIMIZE ) ;

        // Save the window title and change it to "RECORDING!"
        AfxGetApp()->m_pMainWnd->GetWindowText ( m_cWindowTitle ) ;
        AfxGetApp()->m_pMainWnd->SetWindowText ( m_cRecordingTitle ) ;
    }
    else
    {
        ASSERT ( !"StartRecording failed!!" ) ;
        m_bIsRecording = FALSE ;
        m_pOutput->StoppingRecording ( ) ;
    }
}


void CTestRecDoc::OnScriptOptions()
{
    CScriptOptions cOpts ;

    cOpts.m_iMinPixelDrag = m_pRecEngine->GetMinDragLength ( ) ;
    cOpts.m_bRecordAllMouseMoves = m_pRecEngine->GetRecordAllMouseMovements ( ) ;
    cOpts.m_bRecordFocusChangesWithMouse = m_pRecEngine->GetRecordFocusForMouseActions ( ) ;
    cOpts.m_dwSleepTime = m_dwMinSleepMilliseconds / 1000 ;
    cOpts.m_bDoChildFocus = m_pRecEngine->GetRecordChildFocus ( ) ;
    cOpts.m_bMultiMon = m_pRecEngine->GetMultipleMonitors ( ) ;

    BOOL bUseJavaScript = IsDefaultLanguageJavaScript ( ) ;
    if ( TRUE == bUseJavaScript )
    {
        cOpts.m_iLanguageChoice = 0 ;
    }
    else
    {
        cOpts.m_iLanguageChoice = 1 ;
    }

    if ( IDOK == cOpts.DoModal ( ) )
    {
        if ( cOpts.m_iMinPixelDrag != m_pRecEngine->GetMinDragLength ( ) )
        {
            m_pRecEngine->SetMinDragLength ( cOpts.m_iMinPixelDrag ) ;
        }
        if ( cOpts.m_bRecordAllMouseMoves != m_pRecEngine->GetRecordAllMouseMovements ( ) )
        {
            m_pRecEngine->RecordAllMouseMovements ( cOpts.m_bRecordAllMouseMoves ) ;
        }
        if ( cOpts.m_bRecordFocusChangesWithMouse != m_pRecEngine->GetRecordFocusForMouseActions ( ) )
        {
            m_pRecEngine->RecordFocusForMouseActions ( cOpts.m_bRecordFocusChangesWithMouse ) ;
        }
        if ( cOpts.m_bMultiMon != m_pRecEngine->GetMultipleMonitors ( ) )
        {
            m_pRecEngine->MultipleMonitors ( cOpts.m_bMultiMon ) ;
        }
        if ( cOpts.m_dwSleepTime != m_dwMinSleepMilliseconds * 1000 )
        {
            m_dwMinSleepMilliseconds = cOpts.m_dwSleepTime * 1000 ;
        }
        if ( cOpts.m_bDoChildFocus != m_pRecEngine->GetRecordChildFocus ( ) )
        {
            m_pRecEngine->RecordChildFocus ( cOpts.m_bDoChildFocus ) ;
        }

        CTestRecApp * pApp = (CTestRecApp *)AfxGetApp ( ) ;

        pApp->WriteProfileInt ( k_VERSIONSTRING     ,
                              k_MINPIXELDRAG        ,
                              cOpts.m_iMinPixelDrag  ) ;
        pApp->WriteProfileInt( k_VERSIONSTRING              ,
                               k_RECALLMOUSEMOVES           ,
                               cOpts.m_bRecordAllMouseMoves  );

        pApp->WriteProfileInt ( k_VERSIONSTRING                      ,
                                k_RECFOCUSWITHMOUSE                  ,
                                cOpts.m_bRecordFocusChangesWithMouse  );

        pApp->WriteProfileInt ( k_VERSIONSTRING              ,
                                k_MINSLEEP                   ,
                                cOpts.m_dwSleepTime            ) ;

        pApp->WriteProfileInt ( k_VERSIONSTRING              ,
                                k_DOCHILDFOCUSSTATEMENTS     ,
                                cOpts.m_bDoChildFocus         ) ;

        pApp->WriteProfileInt ( k_VERSIONSTRING     ,
                                k_MULTIMON          ,
                                cOpts.m_bMultiMon    ) ;

        LPCTSTR szLang = NULL ;
        if ( 0 == cOpts.m_iLanguageChoice )
        {
            szLang = k_JAVASCRIPT ;
        }
        else
        {
            szLang = k_VBSCRIPT ;
        }

        pApp->WriteProfileString ( k_VERSIONSTRING   ,
                                   k_DEFAULTLANGUAGE ,
                                   szLang             ) ;

    }
}


